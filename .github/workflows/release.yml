name: Build and Release

on:
  push:
    tags:
      - 'v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      release_tag: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full git history for changelog generation

      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate release body
        id: generate_body
        run: |
          # Get previous tag
          PREVIOUS_TAG=$(git tag --sort=-version:refname | head -2 | tail -1)

          # Generate changelog
          if [ -n "$PREVIOUS_TAG" ] && [ "$PREVIOUS_TAG" != "${{ steps.get_version.outputs.VERSION }}" ]; then
            # Initialize changelog
            echo "## 📋 What's Changed" > CHANGELOG.md
            echo "" >> CHANGELOG.md

            # Check and add categorized commits by type (only if they exist)
            SECTIONS_ADDED=0

            # New Features
            FEAT_COMMITS=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..${{ steps.get_version.outputs.VERSION }} --grep="^feat" 2>/dev/null | wc -l)
            if [ "$FEAT_COMMITS" -gt 0 ]; then
              if [ "$SECTIONS_ADDED" -gt 0 ]; then
                echo "" >> CHANGELOG.md
              fi
              echo "### ✨ New Features" >> CHANGELOG.md
              git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..${{ steps.get_version.outputs.VERSION }} --grep="^feat" >> CHANGELOG.md
              SECTIONS_ADDED=$((SECTIONS_ADDED + 1))
            fi

            # Bug Fixes
            FIX_COMMITS=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..${{ steps.get_version.outputs.VERSION }} --grep="^fix" 2>/dev/null | wc -l)
            if [ "$FIX_COMMITS" -gt 0 ]; then
              if [ "$SECTIONS_ADDED" -gt 0 ]; then
                echo "" >> CHANGELOG.md
              fi
              echo "### 🐛 Bug Fixes" >> CHANGELOG.md
              git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..${{ steps.get_version.outputs.VERSION }} --grep="^fix" >> CHANGELOG.md
              SECTIONS_ADDED=$((SECTIONS_ADDED + 1))
            fi

            # Documentation
            DOCS_COMMITS=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..${{ steps.get_version.outputs.VERSION }} --grep="^docs" 2>/dev/null | wc -l)
            if [ "$DOCS_COMMITS" -gt 0 ]; then
              if [ "$SECTIONS_ADDED" -gt 0 ]; then
                echo "" >> CHANGELOG.md
              fi
              echo "### 📚 Documentation" >> CHANGELOG.md
              git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..${{ steps.get_version.outputs.VERSION }} --grep="^docs" >> CHANGELOG.md
              SECTIONS_ADDED=$((SECTIONS_ADDED + 1))
            fi

            # Other Improvements
            OTHER_COMMITS=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..${{ steps.get_version.outputs.VERSION }} --grep="^chore\|^refactor\|^style\|^perf" 2>/dev/null | wc -l)
            if [ "$OTHER_COMMITS" -gt 0 ]; then
              if [ "$SECTIONS_ADDED" -gt 0 ]; then
                echo "" >> CHANGELOG.md
              fi
              echo "### 🔧 Other Improvements" >> CHANGELOG.md
              git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..${{ steps.get_version.outputs.VERSION }} --grep="^chore\|^refactor\|^style\|^perf" >> CHANGELOG.md
              SECTIONS_ADDED=$((SECTIONS_ADDED + 1))
            fi

            # If no categorized commits found, show all commits
            if [ "$SECTIONS_ADDED" -eq 0 ]; then
              echo "### 📝 All Changes" >> CHANGELOG.md
              git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..${{ steps.get_version.outputs.VERSION }} >> CHANGELOG.md
            fi

          else
            echo "## 📋 What's Changed" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "This is the first release of WebDAV Viewer!" >> CHANGELOG.md
          fi

          # Read template and replace variables
          RELEASE_BODY=$(cat .github/release-template.md)
          CHANGES=$(cat CHANGELOG.md)

          # Replace template variables
          RELEASE_BODY="${RELEASE_BODY//\{\{tag_name\}\}/${{ steps.get_version.outputs.VERSION }}}"
          RELEASE_BODY="${RELEASE_BODY//\{\{changes\}\}/$CHANGES}"
          RELEASE_BODY="${RELEASE_BODY//\{\{github_repo\}\}/${{ github.repository }}}"

          # Save to file
          echo "$RELEASE_BODY" > release_body.md

          # Output to GitHub Actions
          echo "RELEASE_BODY<<EOF" >> $GITHUB_OUTPUT
          cat release_body.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ steps.get_version.outputs.VERSION }}',
              name: 'WebDAV Viewer ${{ steps.get_version.outputs.VERSION }}',
              body: process.env.RELEASE_BODY,
              draft: false,
              prerelease: false,
              generate_release_notes: false
            })

            return data.id
        env:
          RELEASE_BODY: ${{ steps.generate_body.outputs.RELEASE_BODY }}

  build-tauri:
    needs: create-release
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            arch: 'arm64'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            arch: 'x64'
          - platform: 'ubuntu-22.04'
            args: ''
            arch: 'x64'
          - platform: 'windows-latest'
            args: ''
            arch: 'x64'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Install Rust targets (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          key: ${{ matrix.platform }}-${{ matrix.arch }}
          cache-all-crates: true

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: pnpm install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

  update-config:
    needs: [create-release, build-tauri]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get release assets
        id: get_assets
        uses: actions/github-script@v7
        with:
          script: |
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ needs.create-release.outputs.release_tag }}'
            });

            const assets = release.data.assets;

            // Find assets for different platforms
            const macosArm64 = assets.find(asset =>
              asset.name.includes('aarch64') &&
              asset.name.includes('apple') &&
              asset.name.endsWith('.dmg')
            );

            const macosX64 = assets.find(asset =>
              asset.name.includes('x86_64') &&
              asset.name.includes('apple') &&
              asset.name.endsWith('.dmg')
            );

            const windows = assets.find(asset =>
              asset.name.includes('x86_64') &&
              asset.name.includes('pc-windows') &&
              asset.name.endsWith('.msi')
            );

            const linux = assets.find(asset =>
              asset.name.includes('x86_64') &&
              asset.name.includes('unknown-linux') &&
              asset.name.endsWith('.AppImage')
            );

            const formatSize = (bytes) => {
              const mb = bytes / (1024 * 1024);
              return mb.toFixed(1) + ' MB';
            };

            return {
              macosArm64: macosArm64 ? {
                downloadUrl: macosArm64.browser_download_url,
                filename: macosArm64.name,
                fileSize: formatSize(macosArm64.size)
              } : null,
              macosX64: macosX64 ? {
                downloadUrl: macosX64.browser_download_url,
                filename: macosX64.name,
                fileSize: formatSize(macosX64.size)
              } : null,
              windows: windows ? {
                downloadUrl: windows.browser_download_url,
                filename: windows.name,
                fileSize: formatSize(windows.size)
              } : null,
              linux: linux ? {
                downloadUrl: linux.browser_download_url,
                filename: linux.name,
                fileSize: formatSize(linux.size)
              } : null
            };

      - name: Update config.json
        run: |
          VERSION="${{ needs.create-release.outputs.release_tag }}"
          VERSION_NUMBER="${VERSION#v}"

          ASSETS='${{ steps.get_assets.outputs.result }}'

          cat > docs/config.json << EOF
          {
            "version": "$VERSION_NUMBER",
            "releases": {
              "macos-arm64": $(echo "$ASSETS" | jq '.macosArm64'),
              "macos-x64": $(echo "$ASSETS" | jq '.macosX64'),
              "windows": $(echo "$ASSETS" | jq '.windows'),
              "linux": $(echo "$ASSETS" | jq '.linux')
            },
            "github": {
              "repoUrl": "https://github.com/${{ github.repository }}"
            }
          }
          EOF

      - name: Commit and push config update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/config.json
          git commit -m "Update config.json for release ${{ needs.create-release.outputs.release_tag }}" || exit 0
          git push
