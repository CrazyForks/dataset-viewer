name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.release.outputs.id || 'test-build' }}
      release_tag: v${{ steps.get_version.outputs.VERSION }}
      upload_url: ${{ steps.release.outputs.upload_url || 'test-build' }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            RAW_VERSION="${{ github.event.inputs.tag }}"
          else
            RAW_VERSION="${GITHUB_REF#refs/tags/}"
          fi

          # 去掉v前缀，统一使用不带v的版本号
          VERSION="${RAW_VERSION#v}"

          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Build Changelog
        id: build_changelog
        if: github.event_name != 'workflow_dispatch'
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          configuration: ".github/changelog_config.json"
          ignorePreReleases: false
          fetchViaCommits: true
          commitMode: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: release
        if: github.event_name != 'workflow_dispatch'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: Dataset Viewer v${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, 'alpha') || contains(steps.get_version.outputs.VERSION, 'beta') || contains(steps.get_version.outputs.VERSION, 'rc') }}
          generate_release_notes: false
          body: |
            ${{ steps.build_changelog.outputs.changelog }}

            ### 💾 Downloads

            | Platform | Download |
            |----------|----------|
            | macOS (Apple Silicon) | [Download DMG](https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/dataset-viewer_${{ steps.get_version.outputs.VERSION }}_aarch64.dmg) |
            | macOS (Intel) | [Download DMG](https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/dataset-viewer_${{ steps.get_version.outputs.VERSION }}_x64.dmg) |
            | Windows x64 | [Download MSI](https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/dataset-viewer_${{ steps.get_version.outputs.VERSION }}_x64_en-US.msi) |
            | Linux (AppImage) | [Download AppImage](https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/dataset-viewer_${{ steps.get_version.outputs.VERSION }}_amd64.AppImage) |
            | Android | [Download APK](https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/app-universal-release-unsigned.apk) |

            ### 🔧 Installation

            - **macOS**: Download DMG → Drag to Applications → Run: `sudo xattr -d com.apple.quarantine "/Applications/Dataset Viewer.app"`
            - **Windows**: Download MSI → Run installer
            - **Linux (AppImage)**: `chmod +x dataset-viewer_*.AppImage` → Run
            - **Android**: Download APK → Enable "Install from unknown sources" → Install APK

  build-tauri:
    needs: create-release
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            arch: 'arm64'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            arch: 'x64'
          - platform: 'ubuntu-22.04'
            args: ''
            arch: 'x64'
          - platform: 'windows-latest'
            args: ''
            arch: 'x64'
          - platform: 'ubuntu-22.04'
            args: '--target aarch64-linux-android'
            arch: 'android'
            mobile: true

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Install Rust targets (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          cache-all-crates: true

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' && !matrix.mobile
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup Android environment (Android only)
        if: matrix.mobile
        run: |
          # Install Java 17
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk

          # Download and setup Android SDK
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools-linux-9477386_latest.zip
          mkdir -p $HOME/android-sdk/cmdline-tools
          mv cmdline-tools $HOME/android-sdk/cmdline-tools/latest

          # Set environment variables (清除 ANDROID_SDK_ROOT 避免冲突)
          echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=" >> $GITHUB_ENV
          echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV
          echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$HOME/android-sdk/platform-tools" >> $GITHUB_PATH

          # Accept licenses and install required packages
          yes | $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses
          $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0" "ndk;25.2.9519653"

          # Set NDK_HOME
          echo "NDK_HOME=$HOME/android-sdk/ndk/25.2.9519653" >> $GITHUB_ENV

          # Add Android Rust targets
          rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android

      - name: Install frontend dependencies
        run: pnpm install

      - name: Fix version for Windows MSI (Windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          # Process version to match Windows MSI requirements
          $files = @("package.json", "src-tauri/Cargo.toml", "src-tauri/tauri.conf.json")

          foreach ($file in $files) {
            $content = Get-Content $file -Raw
            # Remove beta./alpha./rc. suffixes for Windows MSI compatibility
            $content = $content -replace 'beta\.', ''
            $content = $content -replace 'alpha\.', ''
            $content = $content -replace 'rc\.', ''
            # Replace pre-release tags with numbers
            $content = $content -replace '-beta', '-1'
            $content = $content -replace '-alpha', '-2'
            $content = $content -replace '-rc', '-3'
            Set-Content $file $content
          }
        shell: pwsh

      - name: Initialize Android project (Android only)
        if: matrix.mobile
        run: |
          pnpm tauri android init --ci

      - uses: tauri-apps/tauri-action@v0
        if: '!matrix.mobile && github.event_name != ''workflow_dispatch'''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

      - name: Build only (manual trigger)
        if: '!matrix.mobile && github.event_name == ''workflow_dispatch'''
        run: |
          pnpm tauri build ${{ matrix.args }}

      - name: Build Android APK
        if: matrix.mobile
        run: |
          pnpm tauri android build --apk

      - name: Upload Android APK
        if: matrix.mobile && github.event_name != 'workflow_dispatch'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.release_tag }}
          files: src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-unsigned.apk
